# Подробнее о функциях
# При отладке интерпретатор записывает имя функции, а при вызове возвращается в нее

# этап создания функции
# параметры функции - данные на входе, которые нужно обработать внутри функции
def greeting(name):
# локальное пространство имен
    print('Привет,', name)

# этап вызова функции
# глобальное пространство имен
names = ["Мария","Матвей", 'Никита', "Любовь"]
for i in names:
    greeting(i)




# подробнее о функциях
# функция деления div(x - делимое, y - делитель) -> z - частное
# 25 // 5 == 5
def divide(dividend: int, divisor: int) -> int:
    """
    Функция divide принимает делимое и делитель в качестве параметров.
    Возвращает целое частное.
    """

    quotient = 0

    while dividend > 0:
        dividend -= divisor
        quotient += 1 
   
    return quotient

print ("Результат деления:", divide(25,5))



# Именованные и позиционные параметры
# Явный вызов именованных параметров   *
def trapezoid_s(a, b, *, h=1):
    return h * (a + b) / 2
S = trapezoid_s(4, 6,)
print(S)

# Произвольное количество параметров

def sum_all(*args):
    # args - это кортеж
    total = 0
    for i in args:
        total += i
    return total

print(sum_all(1, 2, 3, 4, 5, 100))
 















